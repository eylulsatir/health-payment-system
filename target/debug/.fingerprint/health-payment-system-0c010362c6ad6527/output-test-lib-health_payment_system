{"$message_type":"diagnostic","message":"cannot find type `HealthPaymentSystemClient` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":151,"byte_end":166,"line_start":6,"line_end":6,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":151,"byte_end":166,"line_start":6,"line_end":6,"column_start":1,"column_end":16,"is_primary":false,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[soroban_sdk::contractclient]","def_site_span":{"file_name":"/Users/eylulsatir/.cargo/registry/src/index.crates.io-6f17d22bba15001f/soroban-sdk-macros-22.0.0-rc.2.1/src/lib.rs","byte_start":17120,"byte_end":17199,"line_start":546,"line_end":546,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"pub fn contractclient(metadata: TokenStream, input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `HealthPaymentSystemClient` in this scope\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:6:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[contractimpl]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `soroban_sdk::contractclient` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of deprecated associated function `soroban_sdk::String::from_slice`: use from_str","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":635,"byte_end":645,"line_start":14,"line_end":14,"column_start":32,"column_end":42,"is_primary":true,"text":[{"text":"            return Err(String::from_slice(env, \"Transfer amount must be positive\"));","highlight_start":32,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(deprecated)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated associated function `soroban_sdk::String::from_slice`: use from_str\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:14:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            return Err(String::from_slice(env, \"Transfer amount must be positive\"));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(deprecated)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of deprecated associated function `soroban_sdk::String::from_slice`: use from_str","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":1483,"byte_end":1493,"line_start":34,"line_end":34,"column_start":32,"column_end":42,"is_primary":true,"text":[{"text":"            return Err(String::from_slice(env, \"Amount to be sent must be positive\"));","highlight_start":32,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated associated function `soroban_sdk::String::from_slice`: use from_str\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:34:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            return Err(String::from_slice(env, \"Amount to be sent must be positive\"));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of deprecated associated function `soroban_sdk::String::from_slice`: use from_str","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":2288,"byte_end":2298,"line_start":52,"line_end":52,"column_start":32,"column_end":42,"is_primary":true,"text":[{"text":"            return Err(String::from_slice(env, \"Recipients and amounts lists must be of equal length.\"));","highlight_start":32,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated associated function `soroban_sdk::String::from_slice`: use from_str\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:52:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            return Err(String::from_slice(env, \"Recipients and amounts lists must be of equal length.\"));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type `i128` cannot be dereferenced","code":{"code":"E0614","explanation":"Attempted to dereference a variable which cannot be dereferenced.\n\nErroneous code example:\n\n```compile_fail,E0614\nlet y = 0u32;\n*y; // error: type `u32` cannot be dereferenced\n```\n\nOnly types implementing `std::ops::Deref` can be dereferenced (such as `&T`).\nExample:\n\n```\nlet y = 0u32;\nlet x = &y;\n// So here, `x` is a `&u32`, so we can dereference it:\n*x; // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":2705,"byte_end":2712,"line_start":61,"line_end":61,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"            if *amount <= 0 {","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0614]\u001b[0m\u001b[0m\u001b[1m: type `i128` cannot be dereferenced\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:61:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if *amount <= 0 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of deprecated associated function `soroban_sdk::String::from_slice`: use from_str","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":2755,"byte_end":2765,"line_start":62,"line_end":62,"column_start":36,"column_end":46,"is_primary":true,"text":[{"text":"                return Err(String::from_slice(env, \"Each transfer amount must be positive\"));","highlight_start":36,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated associated function `soroban_sdk::String::from_slice`: use from_str\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:62:36\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                return Err(String::from_slice(env, \"Each transfer amount must be positive\"));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":2895,"byte_end":2904,"line_start":64,"line_end":64,"column_start":68,"column_end":77,"is_primary":true,"text":[{"text":"            token_client.transfer(&env.current_contract_address(), recipient, &amount);","highlight_start":68,"highlight_end":77}],"label":"expected `&Address`, found `Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":2853,"byte_end":2861,"line_start":64,"line_end":64,"column_start":26,"column_end":34,"is_primary":false,"text":[{"text":"            token_client.transfer(&env.current_contract_address(), recipient, &amount);","highlight_start":26,"highlight_end":34}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/eylulsatir/.cargo/registry/src/index.crates.io-6f17d22bba15001f/soroban-sdk-22.0.0-rc.2.1/src/token.rs","byte_start":5501,"byte_end":5509,"line_start":144,"line_end":144,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"    fn transfer(env: Env, from: Address, to: Address, amount: i128);","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider borrowing here","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":2895,"byte_end":2895,"line_start":64,"line_end":64,"column_start":68,"column_end":68,"is_primary":true,"text":[{"text":"            token_client.transfer(&env.current_contract_address(), recipient, &amount);","highlight_start":68,"highlight_end":68}],"label":null,"suggested_replacement":"&","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:64:68\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            token_client.transfer(&env.current_contract_address(), recipient, &amount);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `&Address`, found `Address`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/eylulsatir/.cargo/registry/src/index.crates.io-6f17d22bba15001f/soroban-sdk-22.0.0-rc.2.1/src/token.rs:144:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn transfer(env: Env, from: Address, to: Address, amount: i128);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider borrowing here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            token_client.transfer(&env.current_contract_address(), \u001b[0m\u001b[0m\u001b[38;5;10m&\u001b[0m\u001b[0mrecipient, &amount);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                    \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of deprecated associated function `soroban_sdk::String::from_slice`: use from_str","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":3759,"byte_end":3769,"line_start":85,"line_end":85,"column_start":42,"column_end":52,"is_primary":true,"text":[{"text":"            (user.clone(), 1000, String::from_slice(env, \"First payment\")),","highlight_start":42,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated associated function `soroban_sdk::String::from_slice`: use from_str\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:85:42\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            (user.clone(), 1000, String::from_slice(env, \"First payment\")),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of deprecated associated function `soroban_sdk::String::from_slice`: use from_str","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":3835,"byte_end":3845,"line_start":86,"line_end":86,"column_start":42,"column_end":52,"is_primary":true,"text":[{"text":"            (user.clone(), 2000, String::from_slice(env, \"Regular payment\"))","highlight_start":42,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated associated function `soroban_sdk::String::from_slice`: use from_str\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:86:42\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            (user.clone(), 2000, String::from_slice(env, \"Regular payment\"))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"/Users/eylulsatir/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/macros.rs","byte_start":1635,"byte_end":1895,"line_start":50,"line_end":55,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(","highlight_start":9,"highlight_end":25},{"text":"            // This rustc_box is not required, but it produces a dramatic improvement in compile","highlight_start":1,"highlight_end":97},{"text":"            // time when constructing arrays with many elements.","highlight_start":1,"highlight_end":65},{"text":"            #[rustc_box]","highlight_start":1,"highlight_end":25},{"text":"            $crate::boxed::Box::new([$($x),+])","highlight_start":1,"highlight_end":47},{"text":"        )","highlight_start":1,"highlight_end":10}],"label":"expected `Vec<(Address, i128, String)>`, found `Vec<(Address, {integer}, String)>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":3712,"byte_end":3880,"line_start":84,"line_end":87,"column_start":53,"column_end":10,"is_primary":false,"text":[{"text":"        let history: Vec<(Address, i128, String)> = vec![","highlight_start":53,"highlight_end":58},{"text":"            (user.clone(), 1000, String::from_slice(env, \"First payment\")),","highlight_start":1,"highlight_end":76},{"text":"            (user.clone(), 2000, String::from_slice(env, \"Regular payment\"))","highlight_start":1,"highlight_end":77},{"text":"        ];","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/Users/eylulsatir/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/macros.rs","byte_start":1447,"byte_end":1463,"line_start":42,"line_end":42,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/lib.rs","byte_start":3681,"byte_end":3709,"line_start":84,"line_end":84,"column_start":22,"column_end":50,"is_primary":false,"text":[{"text":"        let history: Vec<(Address, i128, String)> = vec![","highlight_start":22,"highlight_end":50}],"label":"expected due to this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Vec<(Address, {integer}, String)>` and `Vec<(Address, i128, String)>` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`Vec<(Address, {integer}, String)>` is defined in crate `alloc`","code":null,"level":"note","spans":[{"file_name":"/Users/eylulsatir/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs","byte_start":13443,"byte_end":13539,"line_start":398,"line_end":398,"column_start":1,"column_end":97,"is_primary":true,"text":[{"text":"pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {","highlight_start":1,"highlight_end":97}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`Vec<(Address, i128, String)>` is defined in crate `soroban_sdk`","code":null,"level":"note","spans":[{"file_name":"/Users/eylulsatir/.cargo/registry/src/index.crates.io-6f17d22bba15001f/soroban-sdk-22.0.0-rc.2.1/src/vec.rs","byte_start":2708,"byte_end":2725,"line_start":88,"line_end":88,"column_start":1,"column_end":18,"is_primary":true,"text":[{"text":"pub struct Vec<T> {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:84:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let history: Vec<(Address, i128, String)> = vec![\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m______________________\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m___^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected due to this\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            (user.clone(), 1000, String::from_slice(env, \"First payment\")),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            (user.clone(), 2000, String::from_slice(env, \"Regular payment\"))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ];\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Vec<(Address, i128, String)>`, found `Vec<(Address, {integer}, String)>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `Vec<(Address, {integer}, String)>` and `Vec<(Address, i128, String)>` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `Vec<(Address, {integer}, String)>` is defined in crate `alloc`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/eylulsatir/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:398:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m398\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `Vec<(Address, i128, String)>` is defined in crate `soroban_sdk`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/eylulsatir/.cargo/registry/src/index.crates.io-6f17d22bba15001f/soroban-sdk-22.0.0-rc.2.1/src/vec.rs:88:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Vec<T> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `for<'a> soroban_sdk::Error: From<&'a soroban_sdk::String>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":151,"byte_end":166,"line_start":6,"line_end":6,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":"the trait `for<'a> From<&'a soroban_sdk::String>` is not implemented for `soroban_sdk::Error`, which is required by `std::result::Result<(), soroban_sdk::String>: IntoVal<Env, soroban_sdk::Val>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":151,"byte_end":166,"line_start":6,"line_end":6,"column_start":1,"column_end":16,"is_primary":false,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[contractimpl]","def_site_span":{"file_name":"/Users/eylulsatir/.cargo/registry/src/index.crates.io-6f17d22bba15001f/soroban-sdk-macros-22.0.0-rc.2.1/src/lib.rs","byte_start":5850,"byte_end":5927,"line_start":190,"line_end":190,"column_start":1,"column_end":78,"is_primary":false,"text":[{"text":"pub fn contractimpl(metadata: TokenStream, input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `soroban_sdk::Error` implements `From<&'a soroban_sdk::Error>`\n  `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\n  `soroban_sdk::Error` implements `From<ConversionError>`\n  `soroban_sdk::Error` implements `From<Infallible>`\n  `soroban_sdk::Error` implements `From<soroban_env_common::symbol::SymbolError>`\n  `soroban_sdk::Error` implements `From<soroban_env_host::builtin_contracts::contract_error::ContractError>`\n  `soroban_sdk::Error` implements `From<soroban_sdk::xdr::Error>`\n  `soroban_sdk::Error` implements `From<soroban_sdk::xdr::ScError>`\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'a soroban_sdk::String` to implement `for<'a> Into<soroban_sdk::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Error` to implement `for<'a> TryFrom<&'a soroban_sdk::String>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Val` to implement `TryFromVal<Env, std::result::Result<(), soroban_sdk::String>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Val` to implement `FromVal<Env, std::result::Result<(), soroban_sdk::String>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `std::result::Result<(), soroban_sdk::String>` to implement `IntoVal<Env, soroban_sdk::Val>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `for<'a> soroban_sdk::Error: From<&'a soroban_sdk::String>` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:6:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[contractimpl]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `for<'a> From<&'a soroban_sdk::String>` is not implemented for `soroban_sdk::Error`, which is required by `std::result::Result<(), soroban_sdk::String>: IntoVal<Env, soroban_sdk::Val>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<&'a soroban_sdk::Error>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<ConversionError>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<Infallible>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<soroban_env_common::symbol::SymbolError>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<soroban_env_host::builtin_contracts::contract_error::ContractError>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<soroban_sdk::xdr::Error>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<soroban_sdk::xdr::ScError>`\u001b[0m\n\u001b[0m          and 4 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'a soroban_sdk::String` to implement `for<'a> Into<soroban_sdk::Error>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Error` to implement `for<'a> TryFrom<&'a soroban_sdk::String>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Val` to implement `TryFromVal<Env, std::result::Result<(), soroban_sdk::String>>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Val` to implement `FromVal<Env, std::result::Result<(), soroban_sdk::String>>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::result::Result<(), soroban_sdk::String>` to implement `IntoVal<Env, soroban_sdk::Val>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `contractimpl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `for<'a> soroban_sdk::Error: From<&'a soroban_sdk::String>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":151,"byte_end":166,"line_start":6,"line_end":6,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":"the trait `for<'a> From<&'a soroban_sdk::String>` is not implemented for `soroban_sdk::Error`, which is required by `std::result::Result<(), soroban_sdk::String>: IntoVal<Env, soroban_sdk::Val>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":151,"byte_end":166,"line_start":6,"line_end":6,"column_start":1,"column_end":16,"is_primary":false,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[contractimpl]","def_site_span":{"file_name":"/Users/eylulsatir/.cargo/registry/src/index.crates.io-6f17d22bba15001f/soroban-sdk-macros-22.0.0-rc.2.1/src/lib.rs","byte_start":5850,"byte_end":5927,"line_start":190,"line_end":190,"column_start":1,"column_end":78,"is_primary":false,"text":[{"text":"pub fn contractimpl(metadata: TokenStream, input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `soroban_sdk::Error` implements `From<&'a soroban_sdk::Error>`\n  `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\n  `soroban_sdk::Error` implements `From<ConversionError>`\n  `soroban_sdk::Error` implements `From<Infallible>`\n  `soroban_sdk::Error` implements `From<soroban_env_common::symbol::SymbolError>`\n  `soroban_sdk::Error` implements `From<soroban_env_host::builtin_contracts::contract_error::ContractError>`\n  `soroban_sdk::Error` implements `From<soroban_sdk::xdr::Error>`\n  `soroban_sdk::Error` implements `From<soroban_sdk::xdr::ScError>`\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'a soroban_sdk::String` to implement `for<'a> Into<soroban_sdk::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Error` to implement `for<'a> TryFrom<&'a soroban_sdk::String>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Val` to implement `TryFromVal<Env, std::result::Result<(), soroban_sdk::String>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Val` to implement `FromVal<Env, std::result::Result<(), soroban_sdk::String>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `std::result::Result<(), soroban_sdk::String>` to implement `IntoVal<Env, soroban_sdk::Val>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `for<'a> soroban_sdk::Error: From<&'a soroban_sdk::String>` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:6:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[contractimpl]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `for<'a> From<&'a soroban_sdk::String>` is not implemented for `soroban_sdk::Error`, which is required by `std::result::Result<(), soroban_sdk::String>: IntoVal<Env, soroban_sdk::Val>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<&'a soroban_sdk::Error>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<ConversionError>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<Infallible>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<soroban_env_common::symbol::SymbolError>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<soroban_env_host::builtin_contracts::contract_error::ContractError>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<soroban_sdk::xdr::Error>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<soroban_sdk::xdr::ScError>`\u001b[0m\n\u001b[0m          and 4 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'a soroban_sdk::String` to implement `for<'a> Into<soroban_sdk::Error>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Error` to implement `for<'a> TryFrom<&'a soroban_sdk::String>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Val` to implement `TryFromVal<Env, std::result::Result<(), soroban_sdk::String>>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Val` to implement `FromVal<Env, std::result::Result<(), soroban_sdk::String>>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::result::Result<(), soroban_sdk::String>` to implement `IntoVal<Env, soroban_sdk::Val>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `contractimpl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `for<'a> soroban_sdk::Error: From<&'a soroban_sdk::String>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":151,"byte_end":166,"line_start":6,"line_end":6,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":"the trait `for<'a> From<&'a soroban_sdk::String>` is not implemented for `soroban_sdk::Error`, which is required by `std::result::Result<(), soroban_sdk::String>: IntoVal<Env, soroban_sdk::Val>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":151,"byte_end":166,"line_start":6,"line_end":6,"column_start":1,"column_end":16,"is_primary":false,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[contractimpl]","def_site_span":{"file_name":"/Users/eylulsatir/.cargo/registry/src/index.crates.io-6f17d22bba15001f/soroban-sdk-macros-22.0.0-rc.2.1/src/lib.rs","byte_start":5850,"byte_end":5927,"line_start":190,"line_end":190,"column_start":1,"column_end":78,"is_primary":false,"text":[{"text":"pub fn contractimpl(metadata: TokenStream, input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `soroban_sdk::Error` implements `From<&'a soroban_sdk::Error>`\n  `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\n  `soroban_sdk::Error` implements `From<ConversionError>`\n  `soroban_sdk::Error` implements `From<Infallible>`\n  `soroban_sdk::Error` implements `From<soroban_env_common::symbol::SymbolError>`\n  `soroban_sdk::Error` implements `From<soroban_env_host::builtin_contracts::contract_error::ContractError>`\n  `soroban_sdk::Error` implements `From<soroban_sdk::xdr::Error>`\n  `soroban_sdk::Error` implements `From<soroban_sdk::xdr::ScError>`\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'a soroban_sdk::String` to implement `for<'a> Into<soroban_sdk::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Error` to implement `for<'a> TryFrom<&'a soroban_sdk::String>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Val` to implement `TryFromVal<Env, std::result::Result<(), soroban_sdk::String>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Val` to implement `FromVal<Env, std::result::Result<(), soroban_sdk::String>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `std::result::Result<(), soroban_sdk::String>` to implement `IntoVal<Env, soroban_sdk::Val>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `for<'a> soroban_sdk::Error: From<&'a soroban_sdk::String>` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:6:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[contractimpl]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `for<'a> From<&'a soroban_sdk::String>` is not implemented for `soroban_sdk::Error`, which is required by `std::result::Result<(), soroban_sdk::String>: IntoVal<Env, soroban_sdk::Val>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<&'a soroban_sdk::Error>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<ConversionError>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<Infallible>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<soroban_env_common::symbol::SymbolError>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<soroban_env_host::builtin_contracts::contract_error::ContractError>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<soroban_sdk::xdr::Error>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<soroban_sdk::xdr::ScError>`\u001b[0m\n\u001b[0m          and 4 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'a soroban_sdk::String` to implement `for<'a> Into<soroban_sdk::Error>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Error` to implement `for<'a> TryFrom<&'a soroban_sdk::String>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Val` to implement `TryFromVal<Env, std::result::Result<(), soroban_sdk::String>>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Val` to implement `FromVal<Env, std::result::Result<(), soroban_sdk::String>>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::result::Result<(), soroban_sdk::String>` to implement `IntoVal<Env, soroban_sdk::Val>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `contractimpl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `for<'a> soroban_sdk::Error: From<&'a soroban_sdk::String>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":151,"byte_end":166,"line_start":6,"line_end":6,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":"the trait `for<'a> From<&'a soroban_sdk::String>` is not implemented for `soroban_sdk::Error`, which is required by `std::result::Result<i128, soroban_sdk::String>: IntoVal<Env, soroban_sdk::Val>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":151,"byte_end":166,"line_start":6,"line_end":6,"column_start":1,"column_end":16,"is_primary":false,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[contractimpl]","def_site_span":{"file_name":"/Users/eylulsatir/.cargo/registry/src/index.crates.io-6f17d22bba15001f/soroban-sdk-macros-22.0.0-rc.2.1/src/lib.rs","byte_start":5850,"byte_end":5927,"line_start":190,"line_end":190,"column_start":1,"column_end":78,"is_primary":false,"text":[{"text":"pub fn contractimpl(metadata: TokenStream, input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `soroban_sdk::Error` implements `From<&'a soroban_sdk::Error>`\n  `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\n  `soroban_sdk::Error` implements `From<ConversionError>`\n  `soroban_sdk::Error` implements `From<Infallible>`\n  `soroban_sdk::Error` implements `From<soroban_env_common::symbol::SymbolError>`\n  `soroban_sdk::Error` implements `From<soroban_env_host::builtin_contracts::contract_error::ContractError>`\n  `soroban_sdk::Error` implements `From<soroban_sdk::xdr::Error>`\n  `soroban_sdk::Error` implements `From<soroban_sdk::xdr::ScError>`\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'a soroban_sdk::String` to implement `for<'a> Into<soroban_sdk::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Error` to implement `for<'a> TryFrom<&'a soroban_sdk::String>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Val` to implement `TryFromVal<Env, std::result::Result<i128, soroban_sdk::String>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Val` to implement `FromVal<Env, std::result::Result<i128, soroban_sdk::String>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `std::result::Result<i128, soroban_sdk::String>` to implement `IntoVal<Env, soroban_sdk::Val>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `for<'a> soroban_sdk::Error: From<&'a soroban_sdk::String>` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:6:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[contractimpl]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `for<'a> From<&'a soroban_sdk::String>` is not implemented for `soroban_sdk::Error`, which is required by `std::result::Result<i128, soroban_sdk::String>: IntoVal<Env, soroban_sdk::Val>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<&'a soroban_sdk::Error>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<ConversionError>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<Infallible>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<soroban_env_common::symbol::SymbolError>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<soroban_env_host::builtin_contracts::contract_error::ContractError>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<soroban_sdk::xdr::Error>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<soroban_sdk::xdr::ScError>`\u001b[0m\n\u001b[0m          and 4 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'a soroban_sdk::String` to implement `for<'a> Into<soroban_sdk::Error>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Error` to implement `for<'a> TryFrom<&'a soroban_sdk::String>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Val` to implement `TryFromVal<Env, std::result::Result<i128, soroban_sdk::String>>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Val` to implement `FromVal<Env, std::result::Result<i128, soroban_sdk::String>>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::result::Result<i128, soroban_sdk::String>` to implement `IntoVal<Env, soroban_sdk::Val>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `contractimpl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `for<'a> soroban_sdk::Error: From<&'a soroban_sdk::String>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":151,"byte_end":166,"line_start":6,"line_end":6,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":"the trait `for<'a> From<&'a soroban_sdk::String>` is not implemented for `soroban_sdk::Error`, which is required by `std::result::Result<soroban_sdk::Vec<(soroban_sdk::Address, i128, soroban_sdk::String)>, soroban_sdk::String>: IntoVal<Env, soroban_sdk::Val>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":151,"byte_end":166,"line_start":6,"line_end":6,"column_start":1,"column_end":16,"is_primary":false,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[contractimpl]","def_site_span":{"file_name":"/Users/eylulsatir/.cargo/registry/src/index.crates.io-6f17d22bba15001f/soroban-sdk-macros-22.0.0-rc.2.1/src/lib.rs","byte_start":5850,"byte_end":5927,"line_start":190,"line_end":190,"column_start":1,"column_end":78,"is_primary":false,"text":[{"text":"pub fn contractimpl(metadata: TokenStream, input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `soroban_sdk::Error` implements `From<&'a soroban_sdk::Error>`\n  `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\n  `soroban_sdk::Error` implements `From<ConversionError>`\n  `soroban_sdk::Error` implements `From<Infallible>`\n  `soroban_sdk::Error` implements `From<soroban_env_common::symbol::SymbolError>`\n  `soroban_sdk::Error` implements `From<soroban_env_host::builtin_contracts::contract_error::ContractError>`\n  `soroban_sdk::Error` implements `From<soroban_sdk::xdr::Error>`\n  `soroban_sdk::Error` implements `From<soroban_sdk::xdr::ScError>`\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'a soroban_sdk::String` to implement `for<'a> Into<soroban_sdk::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Error` to implement `for<'a> TryFrom<&'a soroban_sdk::String>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Val` to implement `TryFromVal<Env, std::result::Result<soroban_sdk::Vec<(soroban_sdk::Address, i128, soroban_sdk::String)>, soroban_sdk::String>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Val` to implement `FromVal<Env, std::result::Result<soroban_sdk::Vec<(soroban_sdk::Address, i128, soroban_sdk::String)>, soroban_sdk::String>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `std::result::Result<soroban_sdk::Vec<(soroban_sdk::Address, i128, soroban_sdk::String)>, soroban_sdk::String>` to implement `IntoVal<Env, soroban_sdk::Val>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `for<'a> soroban_sdk::Error: From<&'a soroban_sdk::String>` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:6:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[contractimpl]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `for<'a> From<&'a soroban_sdk::String>` is not implemented for `soroban_sdk::Error`, which is required by `std::result::Result<soroban_sdk::Vec<(soroban_sdk::Address, i128, soroban_sdk::String)>, soroban_sdk::String>: IntoVal<Env, soroban_sdk::Val>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<&'a soroban_sdk::Error>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<ConversionError>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<Infallible>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<soroban_env_common::symbol::SymbolError>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<soroban_env_host::builtin_contracts::contract_error::ContractError>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<soroban_sdk::xdr::Error>`\u001b[0m\n\u001b[0m            `soroban_sdk::Error` implements `From<soroban_sdk::xdr::ScError>`\u001b[0m\n\u001b[0m          and 4 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'a soroban_sdk::String` to implement `for<'a> Into<soroban_sdk::Error>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Error` to implement `for<'a> TryFrom<&'a soroban_sdk::String>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Val` to implement `TryFromVal<Env, std::result::Result<soroban_sdk::Vec<(soroban_sdk::Address, i128, soroban_sdk::String)>, soroban_sdk::String>>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Val` to implement `FromVal<Env, std::result::Result<soroban_sdk::Vec<(soroban_sdk::Address, i128, soroban_sdk::String)>, soroban_sdk::String>>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::result::Result<soroban_sdk::Vec<(soroban_sdk::Address, i128, soroban_sdk::String)>, soroban_sdk::String>` to implement `IntoVal<Env, soroban_sdk::Val>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `contractimpl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 9 previous errors; 6 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 9 previous errors; 6 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0277, E0308, E0412, E0614.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0308, E0412, E0614.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
